version: '1'

services:
  postgres_db:
    build:
      context: .
      dockerfile: postgres/Dockerfile
    container_name: postgres
    restart: always
    command: postgres -c config_file=/etc/postgresql/postgresql.conf | postgres -c pg_config=/etc/postgresql/pg_hba.conf
    environment:
      POSTGRES_USER: $POSTGRES_ADMINUSER
      POSTGRES_PASSWORD: $POSTGRES_USER_PASS
    env_file:
      - .env
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - mynetwork

  mongo_db:
    build:
      context: .
      dockerfile: mongo/Dockerfile
    container_name: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: $MONGO_USER_PASS
      MONGO_INITDB_DATABASE: test
    env_file:
      - .env
    ports:
      - "27017:27017"
    volumes:
      - mongo:/data/db
    networks:
      - mynetwork

  django:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        RE_CACHE: aaaaa
    container_name: django
    working_dir: /project/Property-Management/property_management
    command:
      - /bin/sh
      - -c
      - |
        # install chrome and dependecies
        dpkg -i /root/chrome/chrome132_linux64.deb || apt-get install -f -y
        #google-chrome --user-data-dir=/root/.config/google-chrome/myprofile --headless --no-sandbox --disable-gpu &  # Runs in the background (returns control to the shell and prevent block subsequent command)
        python manage.py makemigrations
        python manage.py migrate
        $RUN_DJANGO
        tail -f /dev/null
    env_file:
      - .env
    ports: ["$ACCESS_PORT", "$ACCESS_PORT2"]
    depends_on:
      - postgres_db
      - mongo_db
    networks:
      - mynetwork
    stdin_open: true  # Ensures interactive input/output (eg. print statement could be shown)
    tty: true

volumes:
  postgres:
  mongo:

networks:
  mynetwork: